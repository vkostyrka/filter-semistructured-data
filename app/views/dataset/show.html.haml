.m-3
  %button.btn.btn-primary{"data-target" => "#create-filter-modal", "data-toggle" => "modal"}
    Create filter
  %button.btn.btn-info{ onClick: "addFilter()" }
    Add condition
  %button.btn.btn-danger{ onClick: "removeLastFilter()" }
    Remove last condition

Filter Dashboard
.my-2
  Counts:
  = select_tag('select-counts', options_for_select(@counts), onchange: "getData()")
  Filters:
  %span#filter-dashboard
    = select_tag('first-filter', options_for_select(['No filter'] + @filters.collect{ |f| [f.filter_name, f.id] }), onchange: "getData()")

%table#data-table
  %thead
    %tr
      - @headers.each do |header|
        %th.text-truncate #{header}
  %tbody
    - @data.each do |row|
      %tr
        - row.each do |item|
          %td #{item}


#create-filter-modal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "create-filter-modal", :role => "dialog", :tabindex => "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h5.modal-title Create new filter
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal"}
          %span{"aria-hidden" => "true"} Ã—
      = form_with model: Filter.new, url: filter_index_path do |f|
        .modal-body
          .row
            .col-4
              = f.label :column_name
              %br/
              = f.label :condition
              %br/
              = f.label :value
            .col-8
              = f.select :column_name, options_for_select(@headers), {}, class: 'mw-100'
              %br/
              = f.select :condition, options_for_select(Filter.conditions.keys.map { |item| item.tr('_', ' ') })
              %br/
              = f.text_field :value
              = f.hidden_field :dataset_id, value: @dataset.id

        .modal-footer
          = f.submit("Create", class: "btn-primary btn")

:javascript
  var table = $('#data-table').DataTable({ 'paging': false });

  function getData() {
    let queryParam = ""
    $('#filter-dashboard').children('select').each(function () {
      if (this.value === "No filter") {
        queryParam += "0"
      } else {
        queryParam += this.value
      }
    });

    let count = $('#select-counts')[0].value

    updateTable(`filter=${queryParam}&count=${count}`)
  }

  function updateTable(getParams) {
    let datasetId = window.location.href.split('/')[4]
    let queryURL = `/dataset/${datasetId}?${getParams}`
    fetch(queryURL, {
      headers : {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
       }
    })
    .then((response) => response.json())
    .then((responseData) => {
      table.clear();
      responseData['data'].forEach(row => {
        table.row.add(row);
      })
      table.draw();
    });
  }

  function addFilter() {
    let selectBlock = $("#first-filter").clone()
    let conditionSelect = '<select onChange=applyFilter()><option>and</option><option>or</option></select>'

    $("#filter-dashboard").append(conditionSelect)
    $("#filter-dashboard").append(selectBlock)
  }

  function removeLastFilter() {
    if ($("#filter-dashboard select").length !== 1) {
      $('#filter-dashboard select').last().remove();
      $('#filter-dashboard select').last().remove();
    }
  }
